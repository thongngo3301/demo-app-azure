apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.Values.name}}-deployment
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Values.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.name }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 33%
  template:
    metadata:
        labels:
          app: {{ .Values.name }}
    spec:
      containers:
      - name: {{ .Values.name }}
        image: "{{ .Values.deployment.image.name }}:{{ .Values.deployment.image.tag }}"
        imagePullPolicy: Always
        ports:
        - containerPort: 3000
        livenessProbe:
            httpGet:
              path: /
              port: 3000
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 15
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /
            port: 3000
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 15
          periodSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        resources:
          requests:
            memory: "64Mi"
            cpu: "250m"
          limits:
            memory: "256Mi"
            cpu: "1000m"
        envFrom:
          - secretRef:
              name: {{ .Values.vault.staticSecret.destination.name }}
        env:
          - name: PG_USER
            valueFrom:
              secretKeyRef:
                name: {{ .Values.vault.dynamicSecret.destination.name }}
                key: username
          - name: PG_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.vault.dynamicSecret.destination.name }}
                key: password